<html lang="pt-BR">
<head>
  <meta charset="UTF-8" /> <!-- Define a codifica√ß√£o de caracteres para UTF-8 -->
  
  <title>Status de Propostas - Atualizar e Exportar</title> <!-- T√≠tulo da p√°gina -->
  
  <!-- Estilos CSS para a p√°gina -->
  <style>
    body { 
      font-family: Arial, sans-serif; 
      padding: 20px; 
      background: #f9f9f9; 
    }
    /* Estiliza√ß√£o de formul√°rio */
    label, select, input { 
      display: block; 
      margin-bottom: 10px; 
      width: 100%; 
      max-width: 500px; 
    }
    button { 
      padding: 8px 15px; 
      margin-top: 10px; 
    }
    /* Estiliza√ß√£o da tabela */
    table { 
      border-collapse: collapse; 
      margin-top: 20px; 
      max-width: 700px; 
      width: 100%; 
    }
    table, th, td { 
      border: 1px solid #ccc; 
    }
    th, td { 
      padding: 8px; 
      text-align: left; 
    }
    /* Estilos para bot√µes de a√ß√£o */
    .btn-edit, .btn-delete {
      cursor: pointer; 
      color: white; 
      padding: 4px 8px; 
      border: none; 
      border-radius: 4px;
      font-size: 0.9em;
      margin-right: 5px;
    }
    .btn-edit { background-color: #4CAF50; } /* Verde para editar */
    .btn-delete { background-color: #f44336; } /* Vermelho para apagar */
    /* √Årea de sa√≠da Markdown */
    #markdownOutput { 
      width: 100%; 
      height: 250px; 
      font-family: monospace; 
      margin-top: 20px; 
    }
  </style>
</head>
<body>

<!-- Cabe√ßalho principal -->
<h1>Atualizar Status de Propostas</h1>

<!-- Formul√°rio para adicionar/editar propostas -->
<form id="formProposta">
  <label>T√≠tulo da Proposta:</label>
  <input type="text" id="titulo" required /> <!-- Campo obrigat√≥rio -->

  <label>Link da Proposta:</label>
  <input type="url" id="link" required /> <!-- Campo obrigat√≥rio com valida√ß√£o de URL -->

  <label>Status:</label>
  <select id="status"> <!-- Dropdown de status com emojis -->
    <option value="üü° Em Elabora√ß√£o">üü° Em Elabora√ß√£o</option>
    <option value="üü† Em Aprova√ß√£o do Cliente">üü† Em Aprova√ß√£o do Cliente</option>
    <option value="üü¢ Aprovado">üü¢ Aprovado</option>
    <option value="üî¥ Cancelado">üî¥ Cancelado</option>
  </select>

  <!-- Bot√µes din√¢micos (Salvar/Atualizar) -->
  <button type="submit" id="btnSalvar">Salvar Proposta</button>
  <button type="button" id="btnCancelarEdicao" style="display:none; margin-left: 10px;">Cancelar Edi√ß√£o</button>
</form>

<!-- Se√ß√£o da lista de propostas -->
<h2>Lista de Propostas</h2>
<table id="tabelaPropostas">
  <thead>
    <tr>
      <th>T√≠tulo</th>
      <th>Status</th>
      <th>A√ß√µes</th> <!-- Coluna para bot√µes de editar/apagar -->
    </tr>
  </thead>
  <tbody></tbody> <!-- Local din√¢mico para os dados -->
</table>

<!-- Se√ß√£o de sa√≠da Markdown -->
<h2>Markdown Gerado</h2>
<textarea id="markdownOutput" readonly></textarea> <!-- √Årea de texto somente leitura -->

<br />
<button id="btnSalvarMarkdown">Salvar Markdown no Computador</button> <!-- Bot√£o de exporta√ß√£o -->

<script>
  // Refer√™ncias aos elementos DOM
  const form = document.getElementById('formProposta');
  const tituloInput = document.getElementById('titulo');
  const linkInput = document.getElementById('link');
  const statusSelect = document.getElementById('status');
  const markdownOutput = document.getElementById('markdownOutput');
  const tabelaBody = document.querySelector('#tabelaPropostas tbody');
  const btnCancelarEdicao = document.getElementById('btnCancelarEdicao');
  const btnSalvarMarkdown = document.getElementById('btnSalvarMarkdown');

  // Carrega propostas do localStorage ou inicia array vazio
  let propostas = JSON.parse(localStorage.getItem('propostas') || '[]');
  let indiceEdicao = null; // Controla edi√ß√£o

  // Atualiza a tabela com dados das propostas
  function atualizarTabela() {
    tabelaBody.innerHTML = '';
    propostas.forEach((p, index) => {
      const tr = document.createElement('tr');

      // C√©lula do t√≠tulo com link clic√°vel
      const tdTitulo = document.createElement('td');
      tdTitulo.innerHTML = `<a href="${p.link}" target="_blank" rel="noopener noreferrer">${p.titulo}</a>`;
      tr.appendChild(tdTitulo);

      // C√©lula de status
      const tdStatus = document.createElement('td');
      tdStatus.textContent = p.status;
      tr.appendChild(tdStatus);

      // C√©lula de a√ß√µes (editar/apagar)
      const tdAcoes = document.createElement('td');

      const btnEdit = document.createElement('button');
      btnEdit.textContent = 'Editar';
      btnEdit.className = 'btn-edit';
      btnEdit.onclick = () => editarProposta(index); // Passa √≠ndice para edi√ß√£o

      const btnDelete = document.createElement('button');
      btnDelete.textContent = 'Apagar';
      btnDelete.className = 'btn-delete';
      btnDelete.onclick = () => apagarProposta(index); // Passa √≠ndice para exclus√£o

      tdAcoes.appendChild(btnEdit);
      tdAcoes.appendChild(btnDelete);
      tr.appendChild(tdAcoes);

      tabelaBody.appendChild(tr);
    });
  }

  // Gera conte√∫do Markdown a partir das propostas
  function atualizarMarkdown() {
    let markdown = '| T√≠tulo | Status |\n|--------|--------|\n';
    propostas.forEach(p => {
      markdown += `| [${p.titulo}](${p.link}) | ${p.status} |\n`; // Formato Markdown
    });
    markdownOutput.value = markdown;
  }

  // Salva propostas no localStorage
  function salvarLocal() {
    localStorage.setItem('propostas', JSON.stringify(propostas));
  }

  // Apaga proposta com confirma√ß√£o
  function apagarProposta(index) {
    if(confirm('Deseja realmente apagar essa proposta?')) {
      propostas.splice(index, 1); // Remove do array
      salvarLocal();
      atualizarTabela();
      atualizarMarkdown();
      limparFormulario();
    }
  }

  // Preenche formul√°rio para edi√ß√£o
  function editarProposta(index) {
    const p = propostas[index];
    tituloInput.value = p.titulo;
    linkInput.value = p.link;
    statusSelect.value = p.status;
    indiceEdicao = index; // Armazena √≠ndice sendo editado
    form.querySelector('button[type="submit"]').textContent = 'Atualizar Proposta';
    btnCancelarEdicao.style.display = 'inline-block'; // Mostra bot√£o de cancelamento
  }

  // Reseta formul√°rio e modo edi√ß√£o
  function limparFormulario() {
    form.reset();
    indiceEdicao = null;
    form.querySelector('button[type="submit"]').textContent = 'Salvar Proposta';
    btnCancelarEdicao.style.display = 'none';
  }

  // Evento de envio do formul√°rio (cria√ß√£o/edi√ß√£o)
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    const titulo = tituloInput.value.trim();
    const link = linkInput.value.trim();
    const status = statusSelect.value;

    if (indiceEdicao !== null) {
      // Modo edi√ß√£o: atualiza proposta existente
      propostas[indiceEdicao] = { titulo, link, status };
    } else {
      // Modo cria√ß√£o: verifica duplicatas antes de adicionar
      const existente = propostas.find(p => p.titulo.toLowerCase() === titulo.toLowerCase());
      if (existente) {
        alert('J√° existe uma proposta com esse t√≠tulo. Use outro t√≠tulo ou edite a existente.');
        return;
      }
      propostas.push({ titulo, link, status }); // Adiciona nova
    }

    salvarLocal();
    atualizarTabela();
    atualizarMarkdown();
    limparFormulario();
  });

  // Evento para cancelar edi√ß√£o
  btnCancelarEdicao.addEventListener('click', () => {
    limparFormulario();
  });

  // Exporta√ß√£o do Markdown para arquivo
  btnSalvarMarkdown.addEventListener('click', () => {
    const agora = new Date();
    
    // Formata data para nome do arquivo (YYYY-MM-DD_HH-MM-SS)
    function pad(num) {
      return num.toString().padStart(2, '0');
    }
    const dataHoraStr = `${agora.getFullYear()}-${pad(agora.getMonth()+1)}-${pad(agora.getDate())}_` +
                        `${pad(agora.getHours())}-${pad(agora.getMinutes())}-${pad(agora.getSeconds())}`;

    const nomeArquivo = `status-propostas_${dataHoraStr}.txt`;

    // Cria e dispara download
    const blob = new Blob([markdownOutput.value], {type: "text/markdown;charset=utf-8"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = nomeArquivo;
    document.body.appendChild(a);
    a.click();
    // Limpeza ap√≥s download
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 0);
  });

  // Inicializa√ß√£o da p√°gina
  atualizarTabela();  // Renderiza tabela
  atualizarMarkdown(); // Gera Markdown inicial
</script>

</body>
</html>